// Generated by CoffeeScript 1.9.1
(function() {
  var SS, StoneSkin, Store, clone, uuid,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Store = require('idb-wrapper-promisify');

  uuid = require('node-uuid');

  clone = require('clone');

  module.exports = SS = StoneSkin = {};

  SS.validate = function(data, schema) {
    return {
      validate: function(data) {
        return tv4.validate(data, schema, true);
      }
    };
  };

  SS.Base = (function() {
    Base.prototype.name = null;

    Base.prototype.schema = {};

    function Base() {}

    Base.prototype.save = function() {
      throw new Error('you should override');
    };

    Base.prototype.find = function() {
      throw new Error('you should override');
    };

    Base.prototype.findOne = function() {
      throw new Error('you should override');
    };

    Base.prototype.where = function() {
      throw new Error('you should override');
    };

    Base.prototype.clear = function() {
      throw new Error('you should override');
    };

    Base.prototype._ensureId = function(data) {
      var cloned;
      if (data._id != null) {
        return data;
      } else {
        cloned = clone(data);
        cloned._id = uuid();
        return cloned;
      }
    };

    Base.prototype.validate = function(data) {
      var ref;
      return (ref = typeof SS.validate === "function" ? SS.validate(data, this.schema) : void 0) != null ? ref : (function() {
        console.warn('No validater. Please set StoneSkin.validate or require stone-skin/with-tv4');
        return true;
      })();
    };

    return Base;

  })();

  SS.SyncedMemoryDb = (function(superClass) {
    extend(SyncedMemoryDb, superClass);

    function SyncedMemoryDb() {
      SyncedMemoryDb.__super__.constructor.apply(this, arguments);
      this._data = [];
    }

    SyncedMemoryDb.prototype._pushOrUpdate = function(data) {
      var ensured, found, k, v;
      found = this._find(data._id);
      if (!!found) {
        for (k in data) {
          v = data[k];
          found[k] = v;
        }
        return found;
      } else {
        ensured = this._ensureId(data);
        this._data.push(ensured);
        return ensured;
      }
    };

    SyncedMemoryDb.prototype.save = function(data) {
      var existIds, i, result, valid;
      existIds = this._data.map(function(d) {
        return d._id;
      });
      if (data instanceof Array) {
        if (this.schema && !!this.skipValidate === false) {
          valid = data.every((function(_this) {
            return function(data) {
              return _this.validate(data);
            };
          })(this));
          if (!valid) {
            return new Error('validation error');
          }
        }
        result = (function() {
          var j, len, results;
          results = [];
          for (j = 0, len = data.length; j < len; j++) {
            i = data[j];
            results.push(this._pushOrUpdate(i));
          }
          return results;
        }).call(this);
        return result;
      } else {
        return this._pushOrUpdate(data);
      }
    };

    SyncedMemoryDb.prototype._find = function(id) {
      var item, j, len, ref;
      ref = this._data;
      for (j = 0, len = ref.length; j < len; j++) {
        item = ref[j];
        if (item._id === id) {
          return item;
        }
      }
      return void 0;
    };

    SyncedMemoryDb.prototype.find = function(id) {
      return this._find(id);
    };

    SyncedMemoryDb.prototype.remove = function(id) {
      if (id instanceof Array) {
        this._data = this._data.filter(function(i) {
          var ref;
          return ref = i._id, indexOf.call(id, ref) < 0;
        });
      } else {
        this._data = this._data.filter(function(i) {
          return i._id !== id;
        });
      }
      return void 0;
    };

    SyncedMemoryDb.prototype.findOne = function(fn) {
      var item, j, len, ref;
      ref = this._data;
      for (j = 0, len = ref.length; j < len; j++) {
        item = ref[j];
        if (fn(item)) {
          return item;
        }
      }
      return void 0;
    };

    SyncedMemoryDb.prototype.where = function(fn) {
      var i, j, len, ref, result;
      result = [];
      ref = this._data;
      for (j = 0, len = ref.length; j < len; j++) {
        i = ref[j];
        if (fn(i)) {
          result.push(i);
        }
      }
      return clone(this._data.filter(function(i) {
        return fn(i);
      }));
    };

    SyncedMemoryDb.prototype.clear = function() {
      return this._data.length = 0;
    };

    SyncedMemoryDb.prototype.all = function() {
      return clone(this._data);
    };

    return SyncedMemoryDb;

  })(SS.Base);

  SS.MemoryDb = (function(superClass) {
    extend(MemoryDb, superClass);

    function MemoryDb() {
      MemoryDb.__super__.constructor.apply(this, arguments);
      this.ready = Promise.resolve();
    }

    MemoryDb.prototype.save = function() {
      return Promise.resolve(MemoryDb.__super__.save.apply(this, arguments));
    };

    MemoryDb.prototype.remove = function() {
      return Promise.resolve(MemoryDb.__super__.remove.apply(this, arguments));
    };

    MemoryDb.prototype.find = function() {
      return Promise.resolve(MemoryDb.__super__.find.apply(this, arguments));
    };

    MemoryDb.prototype.findOne = function() {
      return Promise.resolve(MemoryDb.__super__.findOne.apply(this, arguments));
    };

    MemoryDb.prototype.where = function() {
      return Promise.resolve(MemoryDb.__super__.where.apply(this, arguments));
    };

    MemoryDb.prototype.clear = function() {
      return Promise.resolve(MemoryDb.__super__.clear.apply(this, arguments));
    };

    MemoryDb.prototype.all = function() {
      return Promise.resolve(MemoryDb.__super__.all.apply(this, arguments));
    };

    return MemoryDb;

  })(SS.SyncedMemoryDb);

  SS.IndexedDb = (function(superClass) {
    extend(IndexedDb, superClass);

    IndexedDb.prototype.keyPath = '_id';

    function IndexedDb() {
      IndexedDb.__super__.constructor.apply(this, arguments);
      this._store = new Store({
        storeName: this.storeName,
        keyPath: this.keyPath
      });
      this.ready = this._store.ready;
    }

    IndexedDb.prototype.clear = function() {
      return this._store.clear();
    };

    IndexedDb.prototype.where = function(fn) {
      var result;
      result = [];
      return this._store.iterate(function(i) {
        if (fn(i)) {
          return result.push(i);
        }
      }).then(function() {
        return result;
      });
    };

    IndexedDb.prototype.findOne = function(fn) {
      return this.where(fn).then(function(items) {
        return items[0];
      });
    };

    IndexedDb.prototype._saveBatch = function(objs) {
      var result, valid;
      if (this.schema && !!this.skipValidate === false) {
        valid = objs.every((function(_this) {
          return function(data) {
            return _this.validate(data);
          };
        })(this));
        if (!valid) {
          return Promise.reject();
        }
      }
      result = objs.map((function(_this) {
        return function(i) {
          return _this._ensureId(i);
        };
      })(this));
      return this._store.putBatch(result).then(function() {
        return result;
      });
    };

    IndexedDb.prototype.save = function(data) {
      var result;
      if (data instanceof Array) {
        return this._saveBatch(data);
      }
      if (this.schema && !!this.skipValidate === false) {
        if (!this.validate(data)) {
          return Promise.reject();
        }
      }
      result = this._ensureId(data);
      return this._store.put(result).then(function() {
        return result;
      });
    };

    IndexedDb.prototype.remove = function(id) {
      if (id instanceof Array) {
        return this._store.removeBatch(id);
      } else {
        return this._store.remove(id);
      }
    };

    IndexedDb.prototype.find = function(id) {
      return this._store.get(id)["catch"](function(e) {
        return void 0;
      });
    };

    IndexedDb.prototype.all = function() {
      return this._store.getAll();
    };

    IndexedDb.prototype.toMemoryDb = function() {
      return this._store.getAll().then((function(_this) {
        return function(items) {
          var memoryDb;
          memoryDb = new ((function(superClass1) {
            extend(_Class, superClass1);

            function _Class() {
              return _Class.__super__.constructor.apply(this, arguments);
            }

            _Class.prototype.name = _Class.name;

            _Class.prototype.schema = _Class.schema;

            return _Class;

          })(SS.MemoryDb));
          memoryDb._data = items;
          return memoryDb;
        };
      })(this));
    };

    IndexedDb.prototype.toSyncedMemoryDb = function() {
      return this._store.getAll().then((function(_this) {
        return function(items) {
          var memoryDb;
          memoryDb = new ((function(superClass1) {
            extend(_Class, superClass1);

            function _Class() {
              return _Class.__super__.constructor.apply(this, arguments);
            }

            _Class.prototype.name = _Class.name;

            _Class.prototype.schema = _Class.schema;

            return _Class;

          })(SyncedMemoryDb));
          memoryDb._data = items;
          return memoryDb;
        };
      })(this));
    };

    return IndexedDb;

  })(SS.Base);

}).call(this);
